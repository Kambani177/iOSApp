//
//  PlayerView.swift
//  MusicApp
//
//  Created by KAMBANI on 10.11.20.
//
import Foundation
import SwiftUI
import Firebase
import AVFoundation

struct PlayerView: View {
    @State var album : Album
    @State var song : Song
    
    @State var player = AVPlayer()
    
    @State var isPlaying: Bool = false
    
    var body: some View {
        ZStack {
            Image(album.image)
                .resizable()
                .edgesIgnoringSafeArea(.all)
            Blur(style: .dark)
                .edgesIgnoringSafeArea(.all)
            VStack {
                Spacer().frame(height: 10)
                Image(album.image)
                    .resizable()
                    .frame(width: 250, height: 250)
                Text(album.name)
                    .foregroundColor(.init(red: 1, green: 1, blue: 1))
                    .font(.system(size: 20, weight: .bold))
                Text(album.artist)
                    .foregroundColor(.init(red: 187/255, green: 188/255, blue: 189/255))
                    .font(.system(size: 16, weight: .medium))
                Spacer()
//                AlbumArt(album: album)
//                Text(song.name)
//                    .font(.system(size: 20))
//                    .fontWeight(.ultraLight)
//                    .foregroundColor(.white)
                Spacer()
                ZStack{
                    Color
                        .black
                        .opacity(0.2)
                        .cornerRadius(20)
                        .shadow(radius: /*@START_MENU_TOKEN@*/10/*@END_MENU_TOKEN@*/)
                    
                    VStack {
                        Text(song.name)
                            .font(.system(size: 22.5))
                            .fontWeight(.thin)
                            .foregroundColor(.white)
                            .frame(maxWidth: .infinity)
                            .padding(.top, 10)
                        Spacer()
                        HStack {
                            Button(action: self.previous, label: {
                                Image(systemName: "backward.end")
                                    .resizable()
                            }).frame(width: 50, height: 50, alignment: .center)
                            .foregroundColor(Color.white.opacity(0.2))
                            
                            Button(action: self.playPause, label: {
                                Image(systemName: isPlaying ? "pause.circle.fill" :"play.circle.fill")
                                    .resizable()
                                    .foregroundColor(Color.white)
                            }).frame(width: 70, height: 70, alignment: .center)
                            .padding()
                            
                            Button(action: self.next, label: {
                                Image(systemName: "forward.end")
                                    .resizable()
                                    .foregroundColor(Color.white.opacity(0.2))
                            }).frame(width: 50, height: 50, alignment: .center)
                        }.padding(.bottom, 150)
                    }
                }.edgesIgnoringSafeArea(.all)
                .frame(height: 300, alignment: .center)
            }
        }.onAppear() {
            self.playSong()
        }
    }
    
    
    func playSong() {
        let storage = Storage.storage().reference(forURL: self.song.file)
         storage.downloadURL{ (url, error) in
             if error != nil {
                 print(error)
             } else {
                 do {
                     try AVAudioSession.sharedInstance().setCategory(AVAudioSession.Category.playback)
                 }
                 catch {
                     
                 }
                 
                 
                 player = AVPlayer(playerItem: AVPlayerItem(url: url!))
                 player.play()
             }
         }
    }
    
    func playPause() {
        self.isPlaying.toggle()
        if isPlaying == false {
            player.pause()
        } else {
            player.play()
        }
    }
    
    func next() {
        if let currentIndex = album.songs.firstIndex(of: song) {
            if currentIndex == album.songs.count - 1{
                
            } else {
                player.pause()
                song = album.songs[currentIndex + 1]
                self.playSong()
            }
        }
    }
    
    func previous() {
        if let currentIndex = album.songs.firstIndex(of: song) {
            if currentIndex == 0{
                
            } else {
            player.pause()
            song = album.songs[currentIndex - 1]
            self.playSong()
        }
    }
    }
    
}
